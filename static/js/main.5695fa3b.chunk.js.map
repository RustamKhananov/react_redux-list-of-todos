{"version":3,"sources":["store/index.ts","components/Todo.tsx","components/Todos.tsx","App.tsx","api.tsx","index.tsx"],"names":["getIsLoaded","state","isLoaded","initialState","loading","message","users","todos","sortField","customTodos","getSortedTodos","sort","a","b","user","name","localeCompare","title","completed","store","createStore","action","type","console","log","composeWithDevTools","ConnetedTodo","connect","dispatch","setCustomTodos","todo","className","onClick","filter","item","id","ConnectedTodos","sortedTodos","setSortField","value","onChange","event","target","map","ConnectedApp","setIsLoaded","setMessage","useSelector","Promise","all","fetch","then","responce","json","userId","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5695fa3b.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { RootState} from '../types';\n\n// Action types - is just a constant. MUST have a unique value.\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\nconst SET_SORT_FIELD = 'SET_SORT_FIELD';\nconst SET_CUSTOM_TODOS = 'SET_CUSTOM_TODOS';\nconst SET_IS_LOADED = 'SET_IS_LOADED';\nconst SET_MESSAGE = 'SET_MESSAGE';\n\n// Action creators - a function returning an action object\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = (message = 'No message') => ({ type: FINISH_LOADING, message });\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const isLoading = (state: RootState) => state.loading;\nexport const getIsLoaded = (state: RootState) => state.isLoaded;\nexport const getMessage = (state: RootState) => state.message;\nexport const getSortField = (state: RootState) => state.sortField;\n\n\n\n\n\nconst initialState: RootState = {\n  loading: false,\n  isLoaded: false,\n  message: 'Click to load',\n  users: [],\n  todos: [],\n  sortField: 'title',\n  customTodos: [],\n};\n\nexport const getSortedTodos = ({sortField, customTodos}: RootState) => {\n  switch (sortField) {\n    case 'UserName' :\n      return [...customTodos].sort((a, b) => a.user.name.localeCompare(b.user.name));\n    case 'Title' :\n      return [...customTodos].sort((a, b) => a.title.localeCompare(b.title));\n    case 'Completed' :\n      return [...customTodos].sort((a, b) => +a.completed - +b.completed);\n    default:\n      return [...customTodos];\n  }\n\n}\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return { ...state, loading: true };\n\n    case SET_SORT_FIELD:\n      console.log(\"set\")\n      return { ...state, sortField: action.sortField };\n    case SET_MESSAGE:\n      console.log(\"set mess\")\n      return { ...state, message: action.message };\n\n    case SET_CUSTOM_TODOS:\n      console.log(\"set todos\")\n      return { ...state, customTodos: action.customTodos };\n    case SET_IS_LOADED:\n      console.log(\"set isloaded\")\n      return { ...state, isLoaded: action.isLoaded };\n\n    case FINISH_LOADING:\n      return {\n        ...state,\n        loading: false,\n        message: action.message,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","\nimport React from 'react';\nimport { CustomTodo, RootState } from '../types';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\n\nconst Todo = ({\n  todo,\n  setCustomTodos,\n  customTodos\n}:{todo:CustomTodo\n  setCustomTodos: (customTodos: CustomTodo[]) => void;\n  customTodos: CustomTodo[];\n    }) => {\n  return (\n    <div className=\"Todo\">\n  <p><strong>Todo:</strong>{todo.title}</p>\n  <p><strong>Is completed: </strong> {todo.completed ? \"Uncompleted\" : \"Completed\"}</p>\n  <p><strong>User name: </strong>{todo.user.name}</p>\n\n  <button\n  onClick={() => {setCustomTodos(customTodos.filter((item: CustomTodo) => item.id !== todo.id))}}\n  className=\"Todo__button\"\n  >Delete</button>\n  </div>\n\n  )\n}\n\nconst mapDispatch = (dispatch:Dispatch) => ({\n  setCustomTodos: (customTodos:CustomTodo[]) => dispatch({type: 'SET_CUSTOM_TODOS', customTodos})\n})\n\nconst mapState = (state: RootState) => ({\n  customTodos: state.customTodos,\n})\n\n\n\n\n\nexport const ConnetedTodo = connect(mapState, mapDispatch)(Todo)\n\n","\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { getSortedTodos } from '../store';\nimport { RootState, CustomTodo } from '../types';\nimport {ConnetedTodo} from './Todo';\nimport { Dispatch } from 'redux';\n\nconst Todos = ({\n  sortField,\n  setSortField,\n  sortedTodos\n} : {sortField:string;\n   setSortField: (sortField:string) => Object;\n  sortedTodos: CustomTodo[]}) => {\n\n  return(\n    <>\n    <span>Sort type:  </span>\n    <select\n    value={sortField}\n    onChange={(event) => {\n      console.log(\"1\")\n      setSortField(event.target.value)\n    }}\n    >\n      <option value=\"Title\">Title</option>\n      <option value=\"UserName\">UserName</option>\n      <option value=\"Completed\">Completed</option>\n    </select>\n    <ul>\n      {sortedTodos.map((todo:CustomTodo) => (\n        <li>\n          <ConnetedTodo todo={todo}/>\n        </li>\n      ))}\n    </ul>\n    </>\n  )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  sortedTodos: getSortedTodos(state),\n  sortField: state.sortField,\n})\n\nconst mapDispatchToProps = (dispatch:Dispatch) => ({\n  setSortField: (sortField: string) => {\n    console.log('2')\n    return dispatch({type:'SET_SORT_FIELD', sortField})}\n})\n\n\nexport const  ConnectedTodos = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Todos);\n","import React from 'react';\n\n\nimport './App.scss';\nimport { ConnectedTodos } from './components/Todos';\nimport { connect, useSelector } from 'react-redux';\nimport { getIsLoaded} from './store'\nimport { CustomTodo, RootState } from './types';\nimport { getCustomTodos } from './api';\n\n\n\nconst App = ({\n  message,\n  setCustomTodos,\n  setMessage,\n  setIsLoaded}:{\n    setCustomTodos:(customTodos:CustomTodo[])=>void;\n    setIsLoaded:(isLoaded: boolean)=>void;\n    setMessage:(message: string)=>void;\n    message: string;\n  }) => {\n\n\n  const handleButtonClick = () => {\n    setMessage('Data is loaded now...')\n    getCustomTodos().then(customTodos => {\n      setCustomTodos(customTodos);\n      setIsLoaded(true);\n\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of todos</h1>\n      {useSelector(getIsLoaded)\n      ? <ConnectedTodos />\n      : <button\n        onClick={handleButtonClick}\n      >{message}</button>}\n\n    </div>\n  );\n};\n\nconst mapState = (state: RootState) => ({\n  isLoaded: state.isLoaded,\n  message: state.message,\n\n})\n\nconst mapDisp = (dispatch: any) => ({\n  setCustomTodos: (customTodos:CustomTodo[]) => dispatch({type: 'SET_CUSTOM_TODOS', customTodos}),\n  setIsLoaded: (isLoaded:boolean) => dispatch({type: 'SET_IS_LOADED', isLoaded}),\n  setMessage: (message: string) => dispatch({type: 'SET_MESSAGE', message}),\n})\n\n\n\nexport const ConnectedApp =  connect(mapState, mapDisp)(App);\n","\nimport {CustomTodo, Todo, User} from './types';\n\nexport const getUsers = () => {\n  return fetch(\"https://mate-academy.github.io/react_dynamic-list-of-todos/api/users.json\")\n    .then(responce => responce.json())\n    .then(users => users)\n}\nexport const getTodos = () => {\n  return fetch(\"https://mate-academy.github.io/react_dynamic-list-of-todos/api/todos.json\")\n    .then(responce => responce.json())\n    .then(todos=> todos )\n}\n\nexport const getCustomTodos = () => {\n  return Promise.all([getUsers(), getTodos()]).then(([users, todos]) => {\n    console.log(users, todos)\n      const customTodos: CustomTodo[] = todos.map((todo:Todo) => {\n        return ({\n          ...todo,\n          user: users.filter((user:User) => user.id === todo.userId)[0]\n        })\n      })\n      return customTodos;\n\n  })\n}\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport { ConnectedApp } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <ConnectedApp />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}