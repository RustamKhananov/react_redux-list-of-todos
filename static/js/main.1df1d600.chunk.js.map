{"version":3,"sources":["store/index.ts","components/Todo.tsx","components/Todos.tsx","api.tsx","App.tsx","index.tsx"],"names":["getIsLoaded","state","isLoaded","initialState","loading","buttonText","users","todos","sortField","withUserTodos","getSortedTodos","sort","a","b","user","name","localeCompare","title","completed","store","createStore","action","type","composeWithDevTools","Todo","connect","dispatch","setWithUserTodos","todo","className","onClick","filter","item","id","sortedTodos","setSortField","value","onChange","event","target","map","baseURL","setIsLoaded","setButtonText","useSelector","Promise","all","fetch","then","responce","json","userId","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1df1d600.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { RootState } from '../types';\n\n// Action types - is just a constant. MUST have a unique value.\nexport const START_LOADING = 'START_LOADING';\nexport const FINISH_LOADING = 'FINISH_LOADING';\nexport const SET_SORT_FIELD = 'SET_SORT_FIELD';\nexport const SET_WITH_USER_TODOS = 'SET_WITH_USER_TODOS';\nexport const SET_IS_LOADED = 'SET_IS_LOADED';\nexport const SET_BUTTON_TEXT = 'SET_BUTTON_TEXT';\n\n// Action creators - a function returning an action object\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = (message = 'No message') => ({ type: FINISH_LOADING, message });\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const isLoading = (state: RootState) => state.loading;\nexport const getIsLoaded = (state: RootState) => state.isLoaded;\nexport const getButtonText = (state: RootState) => state.buttonText;\nexport const getSortField = (state: RootState) => state.sortField;\n\nconst initialState: RootState = {\n  loading: false,\n  isLoaded: false,\n  buttonText: 'Click to load',\n  users: [],\n  todos: [],\n  sortField: 'title',\n  withUserTodos: [],\n};\n\nexport const getSortedTodos = ({ sortField, withUserTodos }: RootState) => {\n  switch (sortField) {\n    case 'UserName':\n      return [...withUserTodos].sort((a, b) => a.user.name.localeCompare(b.user.name));\n    case 'Title':\n      return [...withUserTodos].sort((a, b) => a.title.localeCompare(b.title));\n    case 'Completed':\n      return [...withUserTodos].sort((a, b) => +a.completed - +b.completed);\n    default:\n      return [...withUserTodos];\n  }\n}\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return { ...state, loading: true };\n    case SET_SORT_FIELD:\n      return { ...state, sortField: action.sortField };\n    case SET_BUTTON_TEXT:\n      return { ...state, buttonText: action.buttonText };\n    case SET_WITH_USER_TODOS:\n      return { ...state, withUserTodos: action.withUserTodos };\n    case SET_IS_LOADED:\n      return { ...state, isLoaded: action.isLoaded };\n    case FINISH_LOADING:\n      return {\n        ...state,\n        loading: false,\n        buttonText: action.buttonText,\n      };\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","\nimport React from 'react';\nimport { WithUserTodo, RootState } from '../types';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\n\nconst TodoTemplate = ({\n  todo,\n  setWithUserTodos,\n  withUserTodos\n}: {\n  todo: WithUserTodo\n  setWithUserTodos: (withUserTodos: WithUserTodo[]) => void;\n  withUserTodos: WithUserTodo[];\n}) => {\n  return (\n    <div className=\"Todo\">\n      <p><strong>Todo:</strong>{todo.title}</p>\n      <p>\n        <strong>\n          Is completed:\n          </strong>\n        {todo.completed ? \"Uncompleted\" : \"Completed\"}\n      </p>\n      <p><strong>User name: </strong>{todo.user.name}</p>\n      <button\n        onClick={() => {\n          setWithUserTodos(withUserTodos\n            .filter((item: WithUserTodo) => item.id !== todo.id)\n          )\n        }}\n        className=\"Todo__button\"\n      >Delete</button>\n    </div>\n  )\n}\n\nconst mapDispatch = (dispatch: Dispatch) => ({\n  setWithUserTodos: (withUserTodos: WithUserTodo[]) => dispatch({\n    type: 'SET_WITH_USER_TODOS',\n    withUserTodos\n  })\n})\n\nconst mapState = (state: RootState) => ({\n  withUserTodos: state.withUserTodos,\n})\n\nexport const Todo = connect(mapState, mapDispatch)(TodoTemplate)\n","\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { getSortedTodos } from '../store';\nimport { RootState, WithUserTodo } from '../types';\nimport { Todo } from './Todo';\nimport { Dispatch } from 'redux';\n\nconst Todos = ({\n  sortField,\n  setSortField,\n  sortedTodos\n}: {\n  sortField: string;\n  setSortField: (sortField: string) => Object;\n  sortedTodos: WithUserTodo[]\n}) => {\n\n  return (\n    <>\n      <span>Sort type:  </span>\n      <select\n        value={sortField}\n        onChange={(event) => {\n          setSortField(event.target.value)\n        }}\n      >\n        <option value=\"Title\">Title</option>\n        <option value=\"UserName\">UserName</option>\n        <option value=\"Completed\">Completed</option>\n      </select>\n      <ul>\n        {sortedTodos.map((todo: WithUserTodo) => (\n          <li>\n            <Todo todo={todo} />\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  sortedTodos: getSortedTodos(state),\n  sortField: state.sortField,\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setSortField: (sortField: string) => {\n    return dispatch({ type: 'SET_SORT_FIELD', sortField })\n  }\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Todos);\n","\nimport { WithUserTodo, Todo, User } from './types';\n\nconst baseURL = \"https://mate-academy.github.io/react_dynamic-list-of-todos/api/\"\n\nexport const getUsers = () => {\n  return fetch(baseURL + \"users.json\")\n    .then(responce => responce.json())\n}\nexport const getTodos = () => {\n  return fetch(baseURL + \"todos.json\")\n    .then(responce => responce.json())\n}\n\nexport const getWithUserTodos = () => {\n  return Promise.all([getUsers(), getTodos()]).then(([users, todos]) => {\n    const withUserTodos: WithUserTodo[] = todos.map((todo: Todo) => {\n      return ({\n        ...todo,\n        user: users.filter((user: User) => user.id === todo.userId)[0]\n      })\n    })\n    return withUserTodos;\n  })\n}\n\n\n\n","import React from 'react';\nimport './App.scss';\nimport Todos from './components/Todos';\nimport { connect, useSelector } from 'react-redux';\nimport { getIsLoaded } from './store'\nimport { WithUserTodo, RootState } from './types';\nimport { getWithUserTodos } from './api';\nimport { SET_WITH_USER_TODOS, SET_IS_LOADED, SET_BUTTON_TEXT } from './store/index';\n\nconst App = ({\n  buttonText,\n  setWithUserTodos,\n  setButtonText,\n  setIsLoaded\n}: {\n  setWithUserTodos: (withUserTodos: WithUserTodo[]) => void;\n  setIsLoaded: (isLoaded: boolean) => void;\n  setButtonText: (buttonText: string) => void;\n  buttonText: string;\n}) => {\n\n  const handleButtonClick = () => {\n    setButtonText('Data is loaded now...')\n    getWithUserTodos().then(withUserTodos => {\n      setWithUserTodos(withUserTodos);\n      setIsLoaded(true);\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of todos</h1>\n      {useSelector(getIsLoaded)\n        ? <Todos />\n        : (\n          <button\n            onClick={handleButtonClick}\n          >\n            {buttonText}\n          </button>\n        )}\n    </div>\n  );\n};\n\nconst mapState = (state: RootState) => ({\n  isLoaded: state.isLoaded,\n  buttonText: state.buttonText,\n})\n\nconst mapDispatch = (dispatch: any) => ({\n  setWithUserTodos: (withUserTodos: WithUserTodo[]) => dispatch({\n    type: SET_WITH_USER_TODOS,\n    withUserTodos\n  }),\n  setIsLoaded: (isLoaded: boolean) => dispatch({\n    type: SET_IS_LOADED,\n    isLoaded\n  }),\n  setButtonText: (buttonText: string) => dispatch({\n    type: SET_BUTTON_TEXT,\n    buttonText\n  }),\n})\n\nexport default connect(mapState, mapDispatch)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}